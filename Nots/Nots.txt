1.Sln, klasör ve Entities ekledik
2.Context oluştur, EF Core Yükledik, Referans ettik; DbSet Oluşturduk.
3.appsettings.json içinde ConnectionString oluşturduk.

4.program.cs içinde ConnectionString'i servise tanımladık. Bunun için iki katmanda da Core, Design, Sql ve Tool yükledik. 
builder.Services.AddDbContext<Context>(opt=>opt.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")
    ))
	DÜZELTME:
	Program.cs içinde servis olarak tanımladığımız bu bağlantı 8. açıklamada değişti.

5. Mappings klasörü oluşturup içine map dosyalarını oluşturduk.

5.IRepository ve Repository interface, sınıf ve methodlarını oluşturduk.

6.Data katmanına kod okunurluğunu arttırmak için bir adet Extenson klasör, 
içine de bir adet ExtensionClass, class'ın içinde de dönüş tipi 'IServiceCollection'
olan bir servis methodu yazdık. 
Bu method ile IoC Konteynerine IRepository<>' istediğimizde bize 'Repository<>' 
nesne göndermesi için bir Scoped türünde bir servis göndermesini amaçladık. 

7. Program.cs dosyasında 6. adımda sözünü ettiğimiz ExtensionClass'ı bir servis olarak IoC konteynere ekledik.
builder.Services.loadDataLayerExtension(builder.Configuration);

8. Program.cs içinde 4.notta bir servis olarak eklediğimiz ConnectionString'i 
  içinde 'IServiceCollection' olan ve 7.not'ta servis olarak eklediğimiz 
  'ExtensionClass' içindeki 'loadDataLayerExtension()' methodunun içine ekledik.
  Bu durumda DataLayerExtension ve program.cs değişmiş oldu.

9. Bu 8.Not'ta anlatılan değişiklikten sonra UI'katmanındaki SQLServer, tool ve Core dan kaldırıldı.
 Bu paketler ihtiyaç olmadığı ve sorunlara yol açabileceği için kaldırdık.
 Projeyi build eden Program.cs ve bunun da dizaynını yani oluşturulmasını sağlayan
 Design paketi web sunucusu için gerekli olan birşey olduğundan onu UI içinde bırakıp,
 Data katmanının içinden kaldırdık.
 
10. Çoklu işlemlerde kullanılan UnitOfWork için klasör, interface ve Class 
oluşturup, methodlarını yazdık.   'ExtensionClass' içindeki 
'loadDataLayerExtension()' methodunun içine
'services.AddScoped<IUnitOfWork, UnitOfWork>();' ekledik.  

11. Services katmanında, Klasörler ve içine interface ile class yapılarını
Oluşturup, içene methodlar yazdık. Çalıştırdığımızda bu katmanda bir 
'ExtensionClass' olmadığı için hata verdiğinden, bu katmanda da bir tane 
'loadServiceLayerExtension' yazdık. Bu servisi Program.cs dosyasına 
'builder.Services.loadServiceLayerExtension();' şeklinde tanımladık.

12. Area oluşturmak için, Program.cs içindeki 'MapAreaControllerRoute' yapısını
değiştirdik. Klasörleri oluşturduk. denemesini yaptık. 
Not: View üzerinde yapılan değişikliklerin güncellendiğinde görülmesi için
'Microsoft.AspNetCore.Mvc.Razor.RunTimeCompilation' paketinin yüklenmesi
ve .'AddRazorRuntimeCompilation()' şeklinde Program.cs de tanımlanması gerekir.

13. 'https://themewagon.com/themes/free-responsive-bootstrap-5-html5-admin-template-sneat/'
adresinden indirdiğimiz free tamplati açtıktan sonra klasör olarak www.root'u klasör olarak aç
değiştirdikten sonra, _Layout.cshtml içine kopyaladık.
_ 'data-assets-path="../assets/"' yolunu yoruma aldık. 
 içindeki '../' yolu '~/sneat/' ile değiştirdik.
 , şablondaki 'Content wrapper' bölümünü index.cshtml içine aldık.

14. AutoMapper kütüphanesi,
https://www.youtube.com/watch?v=SPZaOMRrzLQ&list=PLrSCwxkucNmxFrrAsGm14Z-5Cu52MKrNr&index=10
 Entity katmanına DTOs klasörünü, içine 
ArticleDto Class'ını ekledik. Service katdemanına AutoMapper klasörünü,
'AutoMapper.Extensions.Microsoft.DependencyIjection' ve 'AutoMapper' kütüphanelerini
service katmanına ekledik.
 AutoMapper klasörü aldına 'ArticleProfile' class'ını açıp içini yazdıktan sonra 
 service katmanındaki 'ServiceLayerExtensions' sınıfında tanımladık.
 Controller içinden 'ArticleSevice' servisindeki method'u çağırdık.
 
 15. Identity Yapısı,
 https://www.youtube.com/watch?v=fre9V6D3apI&list=PLrSCwxkucNmxFrrAsGm14Z-5Cu52MKrNr&index=11
 - 'MicrosoftIdentity' ile arama yapıldığında ilgili giriş sayfasına ulaşılıyor. 
 Bu projede 'Kimlik Özelleştirme' sekmesindeki bilgileri kullandık. 
 - Identity yapısı için öncelikle Entities klasörü altında gerekli  olan AppUser
 gibi isimlendirdiğimiz klasörleri ekledik.
- Context'i 'DbContext'ten kalıtım alırken, 'IdentityDbContext'ten kalıtım
  alacak şekilde değiştirdik ve data katmanına 'Microsoft.AspNetCore.Identity.EntityFrameworkCore;'
  6.15 versiyonulu kütüphanesni yükledik.
- Entiy'leri 'IdentityUser<Guid>' sınıfından kalıtım aldırdık 
  'Microsoft.Extensions.Identity.Stores' kütüphanesini Data Katmanına yükledik.
  Hata.Bu sınıfları Entity katmanına da tanımadığım için hata aldık.
- Identity Entiy'lerinin Context içinde DbSet olarak tanımlamıyoruz.   

16. Cooke bazlı Authenticatiın,
https://www.youtube.com/watch?v=sDA30g4623U&list=PLrSCwxkucNmxFrrAsGm14Z-5Cu52MKrNr&index=12
- Program.cs içine Identity Yapısının Cooke Uyarlaması için öncelikle
'builder.Services.AddIdentity<AppUser, AppRole>()' servisi ve app.UseAuthorization();
dan() dan önceki bir yerde 'app.UseAuthentication();' mideware'inin ekliyoruz.
- Cooke eklemek için önce 'builder.Services.AddSession();' servisini ekliyoruz 
sonra 'app.UseSession();' midleware'ini authenticationundan önce ekliyoruz.
Daha sonra 'builder.Services.ConfigureApplicationCookie()' servisini ekleyip
parantezler arasında configurasyon ayarlarını giriyoruz.

17. Login, Logout yapısı kurmak,
https://www.youtube.com/watch?v=5ulgNJUow1s&list=PLrSCwxkucNmxFrrAsGm14Z-5Cu52MKrNr&index=13
- Area/Admin üzerinden başlıyoruz. HomeController'i '[Authorize]' ile işaretliyoruz.
- Program.cs dosyasında cooke ayarlarıda login olmak isteyenlerin yönlendirileceği
path'i belirlemiştik. Bu adrese uygun bir 'Conroller', 'View' class'ı ekledik.
'View'i içerisine html kodlarını ekledikten sonra, 'Controller'ına [HttpGet]
ve [HttpPost] ile Login 'Action'unu oluşturduk.
- [HttpPost] kısmında 'userLoginDto'yu parametre olarak verdik ve girilen 
verilerin doruluğunu kontrol eden kodları yazdık.
- Cooke ayarlarında 'Area/Admin' seçildiğinde 'Login' controller'ına gideceğini
söylemiştik. Ama aynı zamanda 'Area/Admin/Home' içine 'Authorize' attribut'unu 
koyduğumuzdan 'Login' içine 'AllowAnonymus' ile işaretlememiz gerekir.    








